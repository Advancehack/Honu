/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.honu.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class Result implements TBase, java.io.Serializable, Cloneable, Comparable<Result> {
  private static final TStruct STRUCT_DESC = new TStruct("Result");
  private static final TField RESULT_CODE_FIELD_DESC = new TField("resultCode", TType.I32, (short)1);
  private static final TField MESSAGE_FIELD_DESC = new TField("message", TType.STRING, (short)2);

  private int resultCode;
  private String message;
  public static final int RESULTCODE = 1;
  public static final int MESSAGE = 2;

  // isset id assignments
  private static final int __RESULTCODE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(RESULTCODE, new FieldMetaData("resultCode", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(MESSAGE, new FieldMetaData("message", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(Result.class, metaDataMap);
  }

  public static final Map<String, Integer> fieldNameMap = Collections.unmodifiableMap(new HashMap<String, Integer>() {{
    put("resultCode", new Integer(RESULTCODE));
    put("message", new Integer(MESSAGE));
  }});

  public Result() {
  }

  public Result(
    int resultCode,
    String message)
  {
    this();
    this.resultCode = resultCode;
    setResultCodeIsSet(true);
    this.message = message;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Result(Result other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.resultCode = other.resultCode;
    if (other.isSetMessage()) {
      this.message = other.message;
    }
  }

  public Result deepCopy() {
    return new Result(this);
  }

  @Deprecated
  public Result clone() {
    return new Result(this);
  }

  /**
   * 
   * @see ResultCode
   */
  public int getResultCode() {
    return this.resultCode;
  }

  /**
   * 
   * @see ResultCode
   */
  public Result setResultCode(int resultCode) {
    this.resultCode = resultCode;
    setResultCodeIsSet(true);
    return this;
  }

  public void unsetResultCode() {
    __isset_bit_vector.clear(__RESULTCODE_ISSET_ID);
  }

  // Returns true if field resultCode is set (has been asigned a value) and false otherwise
  public boolean isSetResultCode() {
    return __isset_bit_vector.get(__RESULTCODE_ISSET_ID);
  }

  public void setResultCodeIsSet(boolean value) {
    __isset_bit_vector.set(__RESULTCODE_ISSET_ID, value);
  }

  public String getMessage() {
    return this.message;
  }

  public Result setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  // Returns true if field message is set (has been asigned a value) and false otherwise
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case RESULTCODE:
      if (value == null) {
        unsetResultCode();
      } else {
        setResultCode((Integer)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case RESULTCODE:
      return getResultCode();

    case MESSAGE:
      return getMessage();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case RESULTCODE:
      return isSetResultCode();
    case MESSAGE:
      return isSetMessage();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Result)
      return this.equals((Result)that);
    return false;
  }

  public boolean equals(Result that) {
    if (that == null)
      return false;

    boolean this_present_resultCode = true;
    boolean that_present_resultCode = true;
    if (this_present_resultCode || that_present_resultCode) {
      if (!(this_present_resultCode && that_present_resultCode))
        return false;
      if (this.resultCode != that.resultCode)
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_resultCode = true;
    builder.append(present_resultCode);
    if (present_resultCode)
      builder.append(resultCode);

    boolean present_message = true && (isSetMessage());
    builder.append(present_message);
    if (present_message)
      builder.append(message);

    return builder.toHashCode();
  }

  public int compareTo(Result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Result typedOther = (Result)other;

    lastComparison = Boolean.valueOf(isSetResultCode()).compareTo(isSetResultCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(resultCode, typedOther.resultCode);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(message, typedOther.message);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case RESULTCODE:
          if (field.type == TType.I32) {
            this.resultCode = iprot.readI32();
            setResultCodeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MESSAGE:
          if (field.type == TType.STRING) {
            this.message = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(RESULT_CODE_FIELD_DESC);
    oprot.writeI32(this.resultCode);
    oprot.writeFieldEnd();
    if (this.message != null) {
      oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
      oprot.writeString(this.message);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Result(");
    boolean first = true;

    sb.append("resultCode:");
    String resultCode_name = ResultCode.VALUES_TO_NAMES.get(this.resultCode);
    if (resultCode_name != null) {
      sb.append(resultCode_name);
      sb.append(" (");
    }
    sb.append(this.resultCode);
    if (resultCode_name != null) {
      sb.append(")");
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetResultCode() && !ResultCode.VALID_VALUES.contains(resultCode)){
      throw new TProtocolException("The field 'resultCode' has been assigned the invalid value " + resultCode);
    }
  }

}

